buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
//apply plugin: 'eclipse'

version = "${mod_version}"
group = "de.shyrik.${mod_name}"
archivesBaseName = "${mod_name}-${mc_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20190224-1.13.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client = {
            properties 'forge.logging.markers': 'REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'info'
            properties 'username': 'Golemancy'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            properties 'forge.logging.markers': 'REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'info'
            workingDirectory project.file('run/server').canonicalPath
            source sourceSets.main
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.13.2-25.0.50'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

//processResources {
//    inputs.property "version", project.version
//
//    from(sourceSets.main.resources.srcDirs) {
//        include '**/*.toml'
//
//        expand 'version': project.version
//    }
//    from(sourceSets.main.resources.srcDirs) {
//        exclude '**/*.toml'
//    }
//}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "Golemancy",
            "Specification-Vendor": "Shyrik",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Shyrik",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// API jar
//task apiJar(type: Jar) {
//    classifier = 'api'
//    include 'com/camellias/mysticalmetallurgy/api/**/*'
//    from sourceSets.main.allSource
//    from sourceSets.main.output
//}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

tasks.build.dependsOn sourcesJar

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}